name: Deploy to Production (Vercel)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# env:
#   VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#   VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest

      # - name: Pull Vercel Environment Information
      #   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # - name: Build Project Artifacts
      #   run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # - name: Deploy to Vercel Production
      #   run: |
      #     vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
      #     echo "DEPLOYMENT_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV

      - name: Comment deployment URL on commit
        uses: actions/github-script@v7
        with:
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment_url = process.env.DEPLOYMENT_URL;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `âœ… Production deployment successful!\n\nðŸš€ **URL:** ${deployment_url}\nðŸ“¦ **Environment:** Production\nðŸ”„ **Commit:** ${context.sha.substring(0, 7)}`
            });

      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        with:
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              production_environment: true,
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: process.env.DEPLOYMENT_URL,
              description: 'Deployed to Vercel Production'
            });
